using System;
using System.Collections.Immutable;
using System.Linq;
using System.Net;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;


namespace ValueOf.Extensions.ParsableGenerator;

/// <summary>
/// A sample source generator that creates a custom report based on class properties. The target class should be annotated with the 'Generators.ReportAttribute' attribute.
/// When using the source code as a baseline, an incremental source generator is preferable because it reduces the performance overhead.
/// </summary>
[Generator]
public class SourceGeneratorParsableValueOf : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                (s, _) => s is ClassDeclarationSyntax,
                (ctx, _) => GetClassDeclarationForSourceGen(ctx))
            .Where(t => t.isValueOfType)
            .Select((t, _) => t.Item1);

        context.RegisterSourceOutput(context.CompilationProvider.Combine(provider.Collect()),
            ((ctx, t) => GenerateCode(ctx, t.Left, t.Right)));
    }

    private static (ClassDeclarationSyntax, bool isValueOfType) GetClassDeclarationForSourceGen(
        GeneratorSyntaxContext context)
    {
        var classDeclarationSyntax = (ClassDeclarationSyntax)context.Node;

        if (classDeclarationSyntax.BaseList is null)
        {
            return (classDeclarationSyntax, false);
        }

        if (classDeclarationSyntax.Modifiers.All(m => m.Text != "partial"))
        {
            return (classDeclarationSyntax, false);
        }

        foreach (var baseType in classDeclarationSyntax.BaseList.Types)
        {
            if (context.SemanticModel.GetSymbolInfo(baseType.Type).Symbol is not INamedTypeSymbol baseTypeSymbol)
                continue;
            if (baseTypeSymbol.IsGenericType && baseTypeSymbol.ContainingNamespace.Name == "ValueOf" &&
                baseTypeSymbol.Name == "ValueOf")
            {
                return (classDeclarationSyntax, true);
            }
        }

        return (classDeclarationSyntax, false);
    }

    private void GenerateCode(SourceProductionContext context, Compilation compilation,
        ImmutableArray<ClassDeclarationSyntax> classDeclarations)
    {
        foreach (var classDeclarationSyntax in classDeclarations)
        {
            var className = classDeclarationSyntax.Identifier.Text;

            var semanticModel = compilation.GetSemanticModel(classDeclarationSyntax.SyntaxTree);
            if (semanticModel.GetDeclaredSymbol(classDeclarationSyntax) is not INamedTypeSymbol classSymbol)
                continue;

            var modifier =
                classDeclarationSyntax.Modifiers.FirstOrDefault(m => m.Text is "public" or "internal" or "private");
            var modiferText = modifier.Text is null ? "" : modifier.Text + " ";

            var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();

            var baseType = classSymbol.BaseType!;
            var typeArguments = baseType.TypeArguments;

            var t = typeArguments[1].ToDisplayString();

            // Build up the source code
            var code = $@"// <auto-generated/>
#nullable enable
using System;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Collections.Generic;

namespace {namespaceName};

{modiferText}partial class {className}: IParsable<{t}>
{{
    private static readonly TypeConverter _converter = TypeDescriptor.GetConverter(typeof({t}));
    public static {t} Parse(string s, IFormatProvider? provider)
    {{
        return ({t})_converter.ConvertFrom(s)!;
    }}

    public static bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, [MaybeNullWhen(false)] out {t} result)
    {{
        result = default({t});
        if (_converter.CanConvertFrom(typeof(string)))
        {{
            result = ({t})_converter.ConvertFrom(s)!;
            return true;
        }}
        return false;
    }}
}}
";
            context.AddSource($"{className}.g.cs", SourceText.From(code, Encoding.UTF8));
        }
    }
}